{"version":3,"file":"static/js/274.63f76d04.chunk.js","mappings":"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","sources":["components/ActivateAccountPopup.jsx","widgets/SignUpForm.jsx","pages/SignUp.jsx"],"sourcesContent":["// components\nimport Popup from \"@components/Popup\";\n//import { toast } from \"react-toastify\";\nimport { CircularProgress } from \"@mui/material\";\n// hooks\nimport { useForm } from \"react-hook-form\";\n\n// utils\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\n\nconst ActivateAccountPopup = ({ open, onClose, onActivate }) => {\n  const reqStatus = useSelector((state) => state.auth.status);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n\n  const onSubmit = (data, e) => {\n    e.preventDefault();\n\n    //toast.info(`New password was sent to ${data.email}`);\n    onActivate(data);\n    //handleClose();\n  };\n\n  return (\n    <Popup open={open} onClose={handleClose}>\n      <div className=\"d-flex flex-column g-20\">\n        <div className=\"d-flex flex-column g-10\">\n          <h2>Finaliser votre Inscription</h2>\n\n          <p>Un code a été envoyé à votre email, renseigné le ici.</p>\n        </div>\n        <div className=\"d-flex flex-column g-16\">\n          <form className=\"d-flex g-10\" onSubmit={handleSubmit(onSubmit)}>\n            <input\n              className={classNames(\"field\", { \"field--error\": errors.email })}\n              type=\"text\"\n              placeholder=\"Entrer le code\"\n              {...register(\"code\", { required: true, minLength: 3 })}\n            />\n\n            {reqStatus === \"loading\" ? (\n              <CircularProgress color=\"success\" style={{ margin: \"auto\" }} />\n            ) : (\n              <button className=\"btn\" type=\"submit\">\n                Activer\n              </button>\n            )}\n          </form>\n          <p className=\"text-12\">\n            Si vous ne recevez pas d'e-mail dans les minutes qui suivent,\n            veuillez vérifier votre dossier de courrier indésirable.\n          </p>\n        </div>\n      </div>\n    </Popup>\n  );\n};\n\nActivateAccountPopup.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onActivate: PropTypes.func.isRequired,\n};\n\nexport default ActivateAccountPopup;\n","// components\nimport { NavLink } from \"react-router-dom\";\nimport PasswordInput from \"@components/PasswordInput\";\nimport Spring from \"@components/Spring\";\nimport { Fragment } from \"react\";\nimport { toast } from \"react-toastify\";\nimport ActivateAccountPopup from \"@components/ActivateAccountPopup\";\nimport { CircularProgress } from \"@mui/material\";\n\n// hooks\nimport { useForm, Controller } from \"react-hook-form\";\nimport { PatternFormat } from \"react-number-format\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// utils\nimport classNames from \"classnames\";\n\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getActivationToken,\n  activateUserAccount,\n} from \"./../features/user/userSlice\";\n\nconst ACTIVATION_TOKEN = gql`\n  mutation RegisterRegularUser(\n    $name: String!\n    $email: String!\n    $tel: String!\n    $password: String!\n  ) {\n    registerRegularUser(\n      UserInput: { name: $name, email: $email, tel: $tel, password: $password }\n    ) {\n      activationToken\n      error {\n        code\n        message\n      }\n    }\n  }\n`;\n\nconst ACTIVATE_USER = gql`\n  mutation ActivateUser($activationCode: String!, $activationToken: String!) {\n    activateUser(\n      activationInput: {\n        activationCode: $activationCode\n        activationToken: $activationToken\n      }\n    ) {\n      user {\n        name\n        email\n        tel\n        role {\n          name\n        }\n      }\n      accessToken\n      refreshToken\n      error {\n        code\n        message\n      }\n    }\n  }\n`;\n\nconst SignUpForm = ({ standalone = true }) => {\n  const [open, setOpen] = useState(false);\n  const [registerRegularUser] = useMutation(ACTIVATION_TOKEN);\n  const [activateUser] = useMutation(ACTIVATE_USER);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const activationToken = useSelector((state) => state.auth.activationToken);\n  const error = useSelector((state) => state.auth.error);\n  const reqStatus = useSelector((state) => state.auth.status);\n  const ticketsDesired = useSelector((state) => state.events.ticketsDesired);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    control,\n    watch,\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      numero: \"\",\n      email: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n    },\n  });\n\n  const Wrapper = standalone ? Fragment : Spring;\n  const wrapperProps = standalone ? {} : { className: \"card card-padded\" };\n\n  const onSubmit = async (data, e) => {\n    e.preventDefault();\n\n    try {\n      await dispatch(\n        getActivationToken({\n          getActivationTokenFunc: registerRegularUser,\n          email: data.email,\n          password: data.password,\n          name: data.name,\n          tel: data.numero,\n        })\n      ).unwrap();\n    } catch (error) {\n      toast.error(error.message);\n      //console.log(error);\n    }\n    //console.log(data);\n    //\n    /* toast.success(\n      `Account created! Please check your email ${data.email} to confirm your account.`\n    ); */\n  };\n\n  const handleActivateUser = async (data, e) => {\n    try {\n      await dispatch(\n        activateUserAccount({\n          activateUserFunc: activateUser,\n          activationCode: data.code,\n          activationToken: activationToken,\n        })\n      ).unwrap();\n      setOpen(false);\n      Object.keys(ticketsDesired).length > 1\n        ? navigate(\"/payment\")\n        : navigate(\"/\");\n    } catch (error) {\n      toast.error(error.message);\n      //console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    /* if (reqStatus === \"failed\" && activationToken !== \"\") {\n      toast.error(error);\n    } */\n    console.log(activationToken);\n    if (activationToken !== undefined) {\n      setOpen(true);\n    }\n  }, [reqStatus, activationToken]);\n\n  return (\n    <Wrapper {...wrapperProps}>\n      <div className=\"d-flex flex-column g-4\">\n        <h3>Creer votre compte</h3>\n        <p className=\"text-12\">\n          Remplir le formulaire en dessous pour créer un compte\n        </p>\n      </div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div\n          className=\"d-flex flex-column g-20\"\n          style={{ margin: \"20px 0 30px\" }}\n        >\n          <input\n            className={classNames(\"field\", {\n              \"field--error\": errors.name,\n            })}\n            type=\"text\"\n            placeholder=\"Entrer votre nom\"\n            {...register(\"name\", { required: true })}\n          />\n          <Controller\n            control={control}\n            name=\"numero\"\n            render={({ field: { ref, value, onChange } }) => (\n              <PatternFormat\n                required\n                value={value}\n                //minLength={19}\n                className={classNames(\"field\", {\n                  \"field--error\": errors.phone,\n                })}\n                onChange={(e) => onChange(e.target.value)}\n                placeholder=\"Entrer votre numero\"\n                format=\"+225 ##########\"\n                mask=\"_\"\n                getInputRef={ref}\n              />\n            )}\n          />\n          {/* <input\n            className={classNames(\"field\", { \"field--error\": errors.lastName })}\n            type=\"text\"\n            placeholder=\"Entrer votre numero\"\n            {...register(\"numero\", { required: true })}\n          /> */}\n          <input\n            className={classNames(\"field\", { \"field--error\": errors.email })}\n            type=\"text\"\n            placeholder=\"E-mail\"\n            {...register(\"email\", { required: true, pattern: /^\\S+@\\S+$/i })}\n          />\n          <Controller\n            control={control}\n            name=\"password\"\n            rules={{ required: true, minLength: 8 }}\n            render={({\n              field: { ref, onChange, value },\n              fieldState: { error },\n            }) => (\n              <PasswordInput\n                className={classNames(\"field\", { \"field--error\": error })}\n                value={value}\n                onChange={(e) => onChange(e.target.value)}\n                placeholder=\"Entrer votre mot de passe (minimum 8 charactères)\"\n                innerRef={ref}\n              />\n            )}\n          />\n          {errors.password && (\n            <p role=\"alert\">\n              Mot de passe doit atteindre au minimum 8 charactères\n            </p>\n          )}\n          <Controller\n            control={control}\n            name=\"passwordConfirm\"\n            rules={{\n              required: true,\n              validate: (value) => value === watch(\"password\"),\n            }}\n            render={({\n              field: { ref, onChange, value },\n              fieldState: { error },\n            }) => (\n              <PasswordInput\n                className={classNames(\"field\", { \"field--error\": error })}\n                value={value}\n                onChange={(e) => onChange(e.target.value)}\n                placeholder=\"Retaper votre mot de passe\"\n                innerRef={ref}\n              />\n            )}\n          />\n        </div>\n\n        {reqStatus === \"loading\" ? (\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <CircularProgress color=\"success\" style={{ margin: \"auto\" }} />\n          </div>\n        ) : (\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <button type=\"submit\" className=\"btn btn--sm\">\n              Creer compte\n            </button>\n            <button className=\"text-button text-button--sm\">\n              <NavLink aria-label=\"Inscription\" to=\"/login\">\n                Connexion\n              </NavLink>\n            </button>\n          </div>\n        )}\n      </form>\n      <ActivateAccountPopup\n        open={open}\n        onClose={() => setOpen(false)}\n        onActivate={handleActivateUser}\n      />\n    </Wrapper>\n  );\n};\n\nexport default SignUpForm;\n","// components\nimport AuthLayout from '@components/AuthLayout';\nimport SignUpForm from '@widgets/SignUpForm';\n\nconst SignUp = () => {\n    return (\n        <AuthLayout title=\"Sign Up\">\n            <SignUpForm />\n        </AuthLayout>\n    );\n}\n\nexport default SignUp"],"names":["_ref","open","onClose","onActivate","reqStatus","useSelector","state","auth","status","register","handleSubmit","formState","errors","reset","useForm","_jsx","Popup","handleClose","children","_jsxs","className","onSubmit","data","e","preventDefault","classNames","email","type","placeholder","required","minLength","CircularProgress","color","style","margin","ACTIVATION_TOKEN","gql","_templateObject","_taggedTemplateLiteral","ACTIVATE_USER","_templateObject2","standalone","setOpen","useState","registerRegularUser","useMutation","activateUser","navigate","useNavigate","dispatch","useDispatch","activationToken","error","ticketsDesired","events","control","watch","defaultValues","name","numero","password","passwordConfirm","Wrapper","Fragment","Spring","wrapperProps","useEffect","console","log","undefined","async","getActivationToken","getActivationTokenFunc","tel","unwrap","toast","message","Controller","render","_ref2","field","ref","value","onChange","PatternFormat","phone","target","format","mask","getInputRef","pattern","rules","_ref3","fieldState","PasswordInput","innerRef","role","validate","_ref4","NavLink","to","ActivateAccountPopup","activateUserAccount","activateUserFunc","activationCode","code","Object","keys","length","SignUp","AuthLayout","title","SignUpForm"],"sourceRoot":""}
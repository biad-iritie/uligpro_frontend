{"version":3,"file":"static/js/5207.d74d5bdd.chunk.js","mappings":"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","sources":["components/PasswordInput.jsx","components/ResetPasswordPopup.jsx","webpack://liga-soccer/./src/widgets/MyTicket/styles.module.scss?8f53","widgets/MyTicket/index.jsx","pages/MyProfile.jsx","ui/CustomSelect/styles.js","ui/CustomSelect/index.jsx","ui/SelectionButton.jsx","ui/SelectionListTickets.jsx","ui/TabButton.jsx","widgets/AccountSettings/index.jsx","widgets/ChangePassword.jsx"],"sourcesContent":["// hooks\nimport {useState, useEffect} from 'react';\n\nconst PasswordInput = ({innerRef, ...props}) => {\n    const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n\n    const togglePasswordVisibility = e => {\n        e.preventDefault();\n        setIsPasswordVisible(!isPasswordVisible);\n    }\n\n    useEffect(() => {\n        props.value === '' && setIsPasswordVisible(false);\n    }, [props.value]);\n\n    return (\n        <div className=\"field-wrapper\">\n            <input className=\"field\"\n                   type={isPasswordVisible ? 'text' : 'password'}\n                   ref={innerRef}\n                   {...props}/>\n            <button className=\"field-btn\" onClick={togglePasswordVisibility} aria-label=\"Toggle password visibility\">\n                <i className={`icon icon-eye${isPasswordVisible ? '-slash' : '' }`}/>\n            </button>\n        </div>\n    )\n}\n\nexport default PasswordInput","// components\nimport Popup from \"@components/Popup\";\nimport { toast } from \"react-toastify\";\n\n// hooks\nimport { useForm } from \"react-hook-form\";\n\n// utils\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nconst ResetPasswordPopup = ({ open, onClose }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n\n  const onSubmit = (data) => {\n    toast.info(`New password was sent to ${data.email}`);\n    handleClose();\n  };\n\n  return (\n    <Popup open={open} onClose={handleClose}>\n      <div className=\"d-flex flex-column g-20\">\n        <div className=\"d-flex flex-column g-10\">\n          <h2>Reset Password</h2>\n          <p>\n            Enter your email address below and we'll send you a link to reset\n            your password.\n          </p>\n        </div>\n        <div className=\"d-flex flex-column g-16\">\n          <form className=\"d-flex g-10\" onSubmit={handleSubmit(onSubmit)}>\n            <input\n              className={classNames(\"field\", { \"field--error\": errors.email })}\n              type=\"text\"\n              placeholder=\"example@domain.com\"\n              {...register(\"email\", { required: true, pattern: /^\\S+@\\S+$/i })}\n            />\n            <button className=\"btn\">Send</button>\n          </form>\n          <p className=\"text-12\">\n            If you don't receive an email within a few minutes, please check\n            your spam folder.\n          </p>\n        </div>\n      </div>\n    </Popup>\n  );\n};\n\nResetPasswordPopup.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ResetPasswordPopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"styles_header__EwwVZ\",\"cover\":\"styles_cover__lg9gv\",\"teams\":\"styles_teams__FP3f9\",\"teams_item\":\"styles_teams_item__pf-Uy\",\"logo\":\"styles_logo__tyOjy\",\"details\":\"styles_details__Y8bQH\",\"details_item\":\"styles_details_item__L22yo\",\"code\":\"styles_code__gD-2v\",\"light\":\"styles_light__nCUFL\"};","import { QRCode } from \"react-qr-code\";\n// styling\nimport styles from \"./styles.module.scss\";\n\n// components\nimport Spring from \"@components/Spring\";\nimport SelectionListTickets from \"@ui/SelectionListTickets\";\nimport { LinearProgress } from \"@mui/material\";\n// hooks\nimport { useThemeProvider } from \"@contexts/themeContext\";\nimport useSubmenu from \"@hooks/useSubmenu\";\nimport {\n  Page,\n  Document,\n  StyleSheet,\n  View,\n  Text,\n  Image,\n  PDFDownloadLink,\n  PDFViewer,\n} from \"@react-pdf/renderer\";\n\n// hooks\nimport React, { useState, useEffect } from \"react\";\n\n// utils\nimport { messagesByDateHour, displayFullDate } from \"./../../utils/helpers\";\n// constants\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getUserTickets,\n  setStatusToIdle,\n} from \"./../../features/event/eventSlide\";\n\nconst GET_TICKETS = gql`\n  query GetUserTickets {\n    getUserTickets {\n      tickets {\n        code\n        event {\n          name\n          date\n          matches {\n            team1 {\n              name\n              logo\n            }\n            team2 {\n              name\n              logo\n            }\n          }\n        }\n        ticket_category {\n          name\n        }\n      }\n      error {\n        message\n        code\n      }\n    }\n  }\n`;\nconst MyTicket = () => {\n  const { theme } = useThemeProvider();\n  const { anchorEl, open, handleClick, handleClose } = useSubmenu();\n  const dispatch = useDispatch();\n  //dispatch(setStatusToIdle());\n  //const [selected, setSelected] = useState(FINALS_OPTIONS[0].value);\n  const [selected, setSelected] = useState();\n  const [fetched, setFetched] = useState(false);\n  const [getUserTicketsQuery] = useLazyQuery(GET_TICKETS);\n  //const queryTicket = useQuery(GET_TICKETS)\n  const ticketSelected = useSelector((state) => state.events.ticketSelected);\n\n  const status = useSelector((state) => state.events.status.ticket);\n\n  const reduxGetUserTicket = useSelector((state) => state.events.tickets);\n\n  const Ticket = () => {\n    //console.log(selected);\n    const styles = StyleSheet.create({\n      page: {\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        backgroundColor: \"white\",\n        padding: 50,\n      },\n      header: {\n        alignItems: \"center\",\n      },\n      body: {\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      },\n      title: {\n        fontSize: 24,\n        fontWeight: \"bold\",\n        marginBottom: 20,\n      },\n      info: {\n        fontSize: 15,\n        marginBottom: 10,\n      },\n      qrCode: {\n        height: \"200px\",\n        width: \"200px\",\n        alignSelf: \"flex-center\",\n      },\n      notice: {\n        fontSize: 10,\n        marginTop: 10,\n      },\n    });\n    return (\n      <Document>\n        <Page size=\"A4\" style={styles.page}>\n          <View style={styles.header}>\n            <Text style={styles.title}>E-Ticket ULIGPRO</Text>\n\n            <Text style={styles.info}> {selected.event.name}</Text>\n            <Text style={styles.info}>\n              Categorie : {selected.ticket_category.name}\n            </Text>\n            <Text style={styles.info}>\n              Date: {displayFullDate(selected.event.date)}\n            </Text>\n          </View>\n\n          {/* <Text style={styles.info}>Venue: {selected.event.venue.name}</Text> */}\n\n          {/* {selected.event.matches.map((match) => {\n            console.log(match.team1.name);\n            <Text>{`${match.team1.name} VS ${match.team2.name}`}</Text>;\n          })} */}\n\n          {/* <Image\n            src=\"soccer_ball.png\"\n            style={{ width: 50, height: 50, marginBottom: 20 }}\n          /> */}\n          <View style={styles.qrCode}>\n            <Image\n              src={`https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(\n                selected.code\n              )}&size=250x500`}\n            />\n          </View>\n          <View>\n            <Text style={styles.notice}>\n              Nous vous rappellons que, seul le premier ticket scanné sera\n              accepté à entrer. Si un billet a été photocopié, il ne pourra pas\n              entrer dans la salle . Aucune exception ne sera faite, même le\n              ticket est a vôtre nom.\n            </Text>\n          </View>\n        </Page>\n      </Document>\n    );\n  };\n  const submenuActions = [\n    /*  {\n      label: \"Print\",\n      icon: \"print\",\n    }, */\n    {\n      label: \"Telecharger\",\n      icon: \"pdf\",\n      //onClick: download,\n    },\n    /*  {\n      label: \"Sent to E-mail\",\n      icon: \"envelope\",\n    }, */\n  ];\n\n  const fetchTickets = async () => {\n    try {\n      await dispatch(\n        getUserTickets({\n          getUserTicketsFunc: getUserTicketsQuery,\n        })\n      );\n    } catch (error) {}\n  };\n  //fetchTickets();\n  useEffect(() => {\n    //|| (reduxGetUserTicket.length === 0 && status === \"succeeded\")\n\n    if (status === \"idle\") {\n      console.log(status);\n      fetchTickets();\n    }\n    reduxGetUserTicket.length > 0 && setSelected(reduxGetUserTicket[0]);\n    //console.log(selected);\n  }, [dispatch, reduxGetUserTicket, status]);\n\n  return (\n    <Spring className=\"card\">\n      {status === \"loading\" && (\n        <>\n          <LinearProgress color=\"success\" />\n        </>\n      )}\n\n      {status === \"succeeded\" &&\n      reduxGetUserTicket.length > 0 &&\n      selected !== undefined ? (\n        <>\n          {/* <PDFViewer style={{ width: \"100%\", height: \"100vh\" }}>\n            <Ticket />\n          </PDFViewer> */}\n          <SelectionListTickets\n            options={reduxGetUserTicket}\n            active={selected}\n            setActive={setSelected}\n          />\n\n          <div className={styles.header}>\n            <h3>E-ticket</h3>\n            {/* <button aria-label=\"Ticket actions\" onClick={handleClick}>\n              <i className=\"icon icon-ticket-light\" />\n            </button>\n            <Submenu\n              open={open}\n              onClose={handleClose}\n              anchorEl={anchorEl}\n              actions={submenuActions}\n            /> */}\n          </div>\n\n          <div>\n            <div className={styles.details} id=\"ticket\">\n              <div className={styles.details_item}>\n                <span className=\"h6 label\">Categorie</span>\n                <span className=\"h3\">{selected.ticket_category.name}</span>\n              </div>\n              <div className={styles.details_item}>\n                <span className=\"h6 label\">Match(s)</span>\n                <span className=\"h3\">{selected.event.name}</span>\n              </div>\n              <div className={styles.details_item}>\n                <span className=\"h6 label\">Date</span>\n                <span className=\"h3\">\n                  {messagesByDateHour(selected.event.date)}\n                </span>\n              </div>\n            </div>\n            <div className=\"d-flex flex-column g-12 card-padded\">\n              {/* <span className=\"h6 label\">{selected.code}</span> */}\n              <div style={{ margin: \"0 auto\" }}>\n                <QRCode value={selected.code} />\n              </div>\n            </div>\n            <button className=\"btn w-100\">\n              <PDFDownloadLink\n                document={<Ticket />}\n                fileName={`${selected.code}.pdf`}\n              >\n                {({ blob, url, loading, error }) =>\n                  loading ? \"Loading document...\" : \"Telecharger\"\n                }\n              </PDFDownloadLink>\n            </button>\n          </div>\n        </>\n      ) : (\n        <div>\n          <h3>Pas de ticket</h3>\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default MyTicket;\n","// components\nimport PageHeader from \"@layout/PageHeader\";\nimport AppGrid from \"@layout/AppGrid\";\nimport AccountSettings from \"@widgets/AccountSettings\";\nimport ChangePassword from \"@widgets/ChangePassword\";\nimport MyTicket from \"@widgets/MyTicket\";\nimport { useDispatch } from \"react-redux\";\nimport { setStatusToIdle } from \"./../features/event/eventSlide\";\n\nconst widgets = {\n  /* avatar: <ProfileAvatar />, */\n  //info: <ProfileInfo />,\n  ticket: <MyTicket />,\n  settings: <AccountSettings />,\n  password: <ChangePassword />,\n};\n\nconst MyProfile = () => {\n  useDispatch(setStatusToIdle);\n  return (\n    <>\n      <PageHeader title=\"Profile\" />\n      <AppGrid id=\"myprofile\" widgets={widgets} />\n    </>\n  );\n};\n\nexport default MyProfile;\n","import styled from 'styled-components/macro';\nimport {keyframes} from 'styled-components';\nimport theme from 'styled-theming';\nimport Select from 'react-select';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst NormalizedSelect = styled(Select)`\n  .select {\n    &__control {\n      cursor: pointer;\n      transition: var(--transition);\n      border: none;\n      min-height: unset;\n      border-radius: 4px;\n      box-shadow: none;\n\n      &--is-focused, &:hover {\n        outline: none;\n      }\n\n      &--is-focused .icon {\n        transform: rotate(180deg);\n      }\n\n      .icon {\n        transition: .3s ease-in-out;\n      }\n    }\n\n    &__single-value {\n      overflow: visible;\n    }\n\n    &__menu {\n      min-width: max-content;\n      width: 100%;\n      border-radius: 12px;\n      z-index: 100;\n      animation: ${fadeIn} var(--transition);\n\n      &.close {\n        animation: ${fadeIn} var(--transition) reverse;\n      }\n\n      &-list {\n        max-height: 160px;\n        overflow-y: auto;\n        scroll-behavior: smooth;\n        z-index: 100;\n      }\n    }\n\n    &__option {\n      cursor: pointer;\n      transition: var(--transition);\n\n      &:hover,\n      &--is-focused,\n      &--is-selected {\n        background: transparent;\n        color: var(--header);\n      }\n    }\n\n    &__indicator, &__indicator-separator {\n      display: none;\n    }\n\n    &__value-container {\n      padding: 0;\n    }\n  }\n`;\n\nconst BasicSelect = styled(NormalizedSelect)`\n  .select {\n    &__control {\n      background-color: transparent;\n      border: 1px solid var(--border);\n      padding: 0 12px;\n      height: 40px;\n\n      &--is-focused, &:hover {\n        border-color: var(--highlight);\n      }\n    }\n\n    &__placeholder {\n      color: var(--placeholder);\n    }\n\n    &__single-value {\n      color: var(--text);\n      line-height: 1;\n    }\n\n    &__menu {\n      box-shadow: var(--widget-shadow);\n      background: var(--widget);\n      border: ${theme('theme', {\n        light: '1px solid var(--widget)',\n        dark: '1px solid var(--border)',\n      })};\n      width: 100%;\n    }\n  }\n`;\n\nexport default BasicSelect","// styled components\nimport BasicSelect from './styles';\n\n// hooks\nimport {useState} from 'react';\n\n// utils\nimport PropTypes from 'prop-types';\nimport {components} from 'react-select';\nimport {memo} from 'react';\n\nconst CustomSelect = ({options, value, onChange, variant = 'basic', ...props}) => {\n    const [uniqueId] = useState(\n        () => 'select_' + Math.random().toFixed(5).slice(2),\n    );\n\n    // custom dropdown indicator\n    const Control = ({children, ...props}) => {\n        return (\n            <components.Control className={variant === 'basic' ? 'field-input' : ''} {...props}>\n                {children}\n                {\n                    variant === 'minimal' ?\n                        <i className=\"icon icon-caret-down\"/>\n                        :\n                        <i className=\"icon icon-chevron-down\"/>\n                }\n            </components.Control>\n        );\n    }\n\n    // select props\n    const selectProps = {\n        classNamePrefix: 'select',\n        id: props.id || uniqueId,\n        isSearchable: true,\n        options,\n        value,\n        onChange,\n        placeholder: props.placeholder,\n        openMenuOnFocus: true,\n        blurInputOnSelect: true,\n        ref: props.innerRef,\n        defaultValue: props.defaultValue,\n        onMenuClose: () => {\n            const menuEl = document.querySelector(`#${props.id || uniqueId } .select__menu`);\n            const containerEl = menuEl?.parentElement;\n            const clonedMenuEl = menuEl?.cloneNode(true);\n\n            if (!clonedMenuEl) return;\n\n            clonedMenuEl.classList.add('close');\n            clonedMenuEl.addEventListener('animationend', () => {\n                containerEl?.removeChild(clonedMenuEl);\n            });\n\n            containerEl?.appendChild(clonedMenuEl);\n        },\n        components: {\n            Control,\n        },\n    };\n\n    return <BasicSelect {...selectProps} />\n}\n\nCustomSelect.propTypes = {\n    options: PropTypes.array.isRequired,\n    value: PropTypes.object,\n    onChange: PropTypes.func.isRequired\n}\n\nexport default memo(CustomSelect);","// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\n\n// utils\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst StyledButton = styled.button`\n  height: 40px;\n  border-radius: 8px;\n  padding: 0 14px;\n  transition: all var(--transition);\n  line-height: 1;\n  border: 1px solid var(--border);\n\n  &.list {\n    color: ${theme('theme', {\n      light: 'var(--highlight)',\n      dark: 'var(--text)',\n    })};\n    background-color: ${theme('theme', {\n      light: 'var(--widget)',\n      dark: 'var(--border)',\n    })};\n    \n    &:hover, &:focus,\n    &.active {\n        ${theme('theme', {\n          light: `\n            filter: drop-shadow(0px 1px 8px rgba(110, 110, 110, 0.1));\n            border-color: var(--widget);\n        `,\n          dark: `\n            background-color: var(--widget);\n            border-color: var(--widget);\n            box-shadow: 0 1px 8px rgba(33, 33, 33, 0.1);\n            color: var(--accent);\n        `\n        })};\n    }\n  }\n\n  &.group {\n    color: ${theme('theme', {\n      light: 'var(--olive)',\n      dark: 'var(--accent)',\n    })};\n    background-color: var(--widget);\n\n    &:hover, &:focus,\n    &.active {\n      ${theme('theme', {\n        light: `\n            filter: drop-shadow(0px 1px 8px rgba(110, 110, 110, 0.1));\n            border-color: var(--widget);\n        `,\n        dark: `\n            background-color: var(--border);\n        `\n      })};\n    }\n  }\n`;\n\nconst SelectionButton = ({text, onClick, active, type = 'list'}) => {\n    return (\n        <StyledButton className={classNames(`${type} h4`, {'active': active})} onClick={onClick}>\n            {text}\n        </StyledButton>\n    )\n}\n\nSelectionButton.propTypes = {\n    text: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n    active: PropTypes.bool.isRequired,\n    type: PropTypes.oneOf(['list', 'group'])\n}\n\nexport default SelectionButton","// styling\nimport styled from \"styled-components/macro\";\nimport { css } from \"styled-components\";\nimport theme from \"styled-theming\";\n\n// components\nimport SelectionButton from \"@ui/SelectionButton\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\n// hooks\nimport { useEffect, useState } from \"react\";\nimport { useThemeProvider } from \"@contexts/themeContext\";\n\n// utils\nimport PropTypes from \"prop-types\";\n\nconst prevButton = css`\n  padding-left: 10px;\n  background: ${theme(\"theme\", {\n    light:\n      \"linear-gradient(90deg, #FFFFFF 28.49%, rgba(255, 255, 255, 0.0001) 100%);\",\n    dark: \"linear-gradient(-90deg, rgba(17, 19, 18, 0.0001) 0%, #111312 77.09%);\",\n  })};\n  border-radius: 4px 0 0 0;\n`;\n\nconst nextButton = css`\n  padding-right: 10px;\n  background: ${theme(\"theme\", {\n    light:\n      \"linear-gradient(-90deg, #FFFFFF 28.49%, rgba(255, 255, 255, 0.0001) 100%);\",\n    dark: \"linear-gradient(90deg, rgba(17, 19, 18, 0.0001) 0%, #111312 77.09%);\",\n  })};\n  border-radius: 0 4px 0 0;\n`;\n\nconst StyledSelectionList = styled.div`\n  display: flex;\n  gap: 20px;\n  box-shadow: 0 1px 8px rgba(110, 110, 110, 0.1);\n  background: ${theme(\"theme\", {\n    light: \"var(--widget)\",\n    dark: \"#1B1F23\",\n  })};\n  position: relative;\n\n  .swiper {\n    padding: 20px 0;\n  }\n\n  .swiper-slide {\n    width: fit-content;\n  }\n\n  .nav {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 10;\n\n    button {\n      width: 50px;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      color: #8ea2ab;\n    }\n\n    &.ltr button {\n      &:first-child {\n        ${prevButton};\n        justify-content: flex-start;\n      }\n\n      &:last-child {\n        ${nextButton};\n        justify-content: flex-end;\n      }\n    }\n\n    &.rtl button {\n      &:first-child {\n        ${nextButton};\n        justify-content: flex-start;\n      }\n\n      &:last-child {\n        ${prevButton};\n        justify-content: flex-end;\n      }\n    }\n  }\n`;\n\nconst SelectionListTickets = ({ active, setActive, options, innerRef }) => {\n  const [swiper, setSwiper] = useState(null);\n  const { direction } = useThemeProvider();\n  //console.log(active);\n  const handlePrev = () => {\n    swiper.slidePrev();\n    setActive(options[swiper.realIndex] || options[swiper.realIndex]);\n  };\n\n  const handleNext = () => {\n    swiper.slideNext();\n    setActive(options[swiper.realIndex] || options[swiper.realIndex]);\n  };\n\n  useEffect(() => {\n    if (swiper) {\n      swiper.changeLanguageDirection(direction);\n      swiper.update();\n    }\n  }, [swiper, direction]);\n\n  return (\n    <StyledSelectionList ref={innerRef}>\n      <div className={`nav ${direction}`}>\n        <button aria-label=\"Previous\" onClick={handlePrev}>\n          <i className=\"icon icon-chevron-left\" />\n        </button>\n        <button aria-label=\"Next\" onClick={handleNext}>\n          <i className=\"icon icon-chevron-right\" />\n        </button>\n      </div>\n      <Swiper\n        className=\"selection-list w-100 h-100\"\n        onSwiper={setSwiper}\n        slidesPerView=\"auto\"\n        spaceBetween={12}\n        loop={true}\n        centeredSlides={true}\n      >\n        {options.map((option, index) => (\n          <SwiperSlide key={index}>\n            <SelectionButton\n              text={(index + 1).toString()}\n              active={active === option.code || active === option}\n              onClick={() => setActive(option || option)}\n            />\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </StyledSelectionList>\n  );\n};\n\nSelectionListTickets.propTypes = {\n  active: PropTypes.object,\n  setActive: PropTypes.func,\n  options: PropTypes.array,\n  innerRef: PropTypes.any,\n};\n\nexport default SelectionListTickets;\n","// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\n\n// hooks\nimport {useThemeProvider} from '@contexts/themeContext';\n\n// utils\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst StyledTabButton = styled.button`\n  border-radius: 0;\n  position: relative;\n  background: ${theme('theme', {\n    light: 'var(--body)',\n    dark: 'var(--border)'\n  })};\n\n  &.active, &[aria-selected='true'], &:hover, &:focus {\n    background: ${theme('theme', {\n      light: 'var(--widget) !important',\n      dark: 'var(--accent) !important'\n    })};\n    box-shadow: ${theme('theme', {\n      light: '0 1px 8px rgba(110, 110, 110, 0.1);',\n      dark: 'none'\n    })};\n  }\n\n  .title {\n    position: relative;\n    z-index: 2;\n  }\n\n  .color {\n    position: absolute;\n    z-index: 1;\n    height: 100%;\n    width: 4px;\n    top: 0;\n    transition: width var(--transition);\n  }\n\n  &:first-of-type .color {\n    &.ltr {\n      left: 0;\n    }\n\n    &.rtl {\n      right: 0;\n    }\n  }\n\n  &:last-of-type .color {\n    transform: scaleX(-1);\n\n    &.ltr {\n      right: 0;\n    }\n\n    &.rtl {\n      left: 0;\n    }\n  }\n\n  &[data-colored='true'] {\n    &.active, &[aria-selected='true'], &:hover, &:focus {\n      background: var(--widget) !important;\n      box-shadow: none;\n\n      .color {\n        width: 100%;\n      }\n\n      &.dark-bg {\n        color: #fff;\n      }\n    }\n  }\n`;\n\nconst TabButton = ({title, active, onClick, type = 'basic', color, value}) => {\n    const {direction} = useThemeProvider();\n    const darkColors = ['blue', 'purple'];\n\n    return (\n        <StyledTabButton\n            className={classNames('btn text-overflow', {'active': active, 'dark-bg': darkColors.includes(color)})}\n            data-colored={type === 'color'}\n            value={value}\n            onClick={onClick}>\n            {\n                type === 'color' && (\n                    <span className={`color ${direction}`} style={{backgroundColor: `var(--${color})`}}/>\n                )\n            }\n            <span className=\"title\">\n                {title}\n            </span>\n        </StyledTabButton>\n    )\n}\n\nTabButton.propTypes = {\n    title: PropTypes.string.isRequired,\n    active: PropTypes.bool,\n    onClick: PropTypes.func,\n    type: PropTypes.oneOf(['basic', 'color']),\n    color: PropTypes.string\n}\n\nexport default TabButton","// styling\nimport styles from \"./styles.module.scss\";\n\n// components\nimport Spring from \"@components/Spring\";\nimport { TabsList } from \"@mui/base/TabsList\";\nimport { TabPanel } from \"@mui/base/TabPanel\";\nimport { Tabs } from \"@mui/base/Tabs\";\nimport TabButton from \"@ui/TabButton\";\nimport Profile from \"@widgets/AccountSettings/Profile\";\nimport Fade from \"@mui/material/Fade\";\n\n// hooks\nimport { useState } from \"react\";\nimport { useWindowSize } from \"react-use\";\n\nconst AccountSettings = () => {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const { width } = useWindowSize();\n\n  return (\n    <Spring className=\"card d-flex flex-column card-padded\">\n      <h3>Paramètre du compte (En cours ...)</h3>\n      {/* <div className=\"d-flex flex-column justify-content-between flex-1\">\n                <Tabs value={activeTab}>\n                    <TabsList className={`${styles.tabs_list} tab-nav col-2`}>\n                        <TabButton title={width >= 375 ? 'Edit Profile' : 'Profile'}\n                                   onClick={() => setActiveTab('profile')}\n                                   active={activeTab === 'profile'}/>\n                        <TabButton title={width >= 375 ? 'Basic settings' : 'Basic'}\n                                   onClick={() => setActiveTab('basic')}\n                                   active={activeTab === 'basic'}/>\n                    </TabsList>\n                    <TabPanel value=\"profile\">\n                        <Fade in={activeTab === 'profile'} timeout={400}>\n                            <div>\n                                <Profile/>\n                            </div>\n                        </Fade>\n                    </TabPanel>\n                    <TabPanel value=\"basic\">\n                        <Fade in={activeTab === 'basic'} timeout={400}>\n                            <div>\n                                <Profile/>\n                            </div>\n                        </Fade>\n                    </TabPanel>\n                </Tabs>\n            </div> */}\n    </Spring>\n  );\n};\n\nexport default AccountSettings;\n","// components\nimport Spring from \"@components/Spring\";\nimport PasswordInput from \"@components/PasswordInput\";\nimport ResetPasswordPopup from \"@components/ResetPasswordPopup\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { toast } from \"react-toastify\";\n\n// hooks\nimport { useState } from \"react\";\nimport classNames from \"classnames\";\n\nconst ChangePassword = () => {\n  const [open, setOpen] = useState(false);\n  const { handleSubmit, watch, reset, control } = useForm({\n    defaultValues: {\n      passwordOld: \"\",\n      passwordNew: \"\",\n      passwordConfirm: \"\",\n    },\n  });\n\n  const onSubmit = (data) => {\n    toast.success(\"Password changed successfully\");\n  };\n\n  const handleResetPassword = (e) => {\n    e.preventDefault();\n    setOpen(true);\n  };\n\n  return (\n    <Spring className=\"card d-flex flex-column justify-content-between g-24 card-padded\">\n      <div className=\"d-flex flex-column g-8\">\n        <h3>Modifie ton mot de passe (En Cours ...)</h3>\n        {/* <p className=\"text-overflow\">Change or reset your account password</p> */}\n      </div>\n      {/* <form className=\"d-flex flex-column g-40\">\n                <div className=\"d-flex flex-column g-20\">\n                    <Controller control={control}\n                                name=\"passwordOld\"\n                                rules={{required: true}}\n                                render={({field: {ref, onChange, value}, fieldState: {error}}) => (\n                                    <PasswordInput\n                                        className={classNames('field', {'field--error': error})}\n                                        value={value}\n                                        onChange={e => onChange(e.target.value)}\n                                        placeholder=\"Old password\"\n                                        innerRef={ref}/>\n                                )}\n                    />\n                    <Controller control={control}\n                                name=\"passwordNew\"\n                                rules={{required: true}}\n                                render={({field: {ref, onChange, value}, fieldState: {error}}) => (\n                                    <PasswordInput\n                                        className={classNames('field', {'field--error': error})}\n                                        value={value}\n                                        onChange={e => onChange(e.target.value)}\n                                        placeholder=\"New password\"\n                                        innerRef={ref}/>\n                                )}\n                    />\n                    <Controller control={control}\n                                name=\"passwordConfirm\"\n                                rules={{\n                                    required: true,\n                                    validate: value => value === watch('passwordNew')\n                                }}\n                                render={({field: {ref, onChange, value}, fieldState: {error}}) => (\n                                    <PasswordInput\n                                        className={classNames('field', {'field--error': error})}\n                                        value={value}\n                                        onChange={e => onChange(e.target.value)}\n                                        placeholder=\"Confirm new password\"\n                                        innerRef={ref}/>\n                                )}\n                    />\n                    <button className=\"text-button text-button--sm\"\n                            onClick={handleResetPassword}\n                            style={{alignSelf: 'flex-start'}}>\n                        Reset password?\n                    </button>\n                </div>\n                <div className=\"d-flex flex-column g-16\">\n                    <button className=\"btn\" type=\"submit\" onClick={handleSubmit(onSubmit)}>\n                        Change password\n                    </button>\n                    <button className=\"btn btn--outlined\" type=\"reset\" onClick={reset}>\n                        Cancel\n                    </button>\n                </div>\n            </form>\n            <ResetPasswordPopup open={open} onClose={() => setOpen(false)}/> */}\n    </Spring>\n  );\n};\n\nexport default ChangePassword;\n"],"names":["_ref","innerRef","props","isPasswordVisible","setIsPasswordVisible","useState","useEffect","value","_jsxs","className","children","_jsx","type","ref","onClick","e","preventDefault","concat","open","onClose","register","handleSubmit","formState","errors","reset","useForm","handleClose","Popup","onSubmit","data","toast","info","email","classNames","placeholder","required","pattern","GET_TICKETS","gql","_templateObject","_taggedTemplateLiteral","MyTicket","theme","useThemeProvider","anchorEl","handleClick","useSubmenu","dispatch","useDispatch","selected","setSelected","fetched","setFetched","getUserTicketsQuery","useLazyQuery","status","useSelector","state","events","ticketSelected","ticket","reduxGetUserTicket","tickets","Ticket","styles","StyleSheet","create","page","flexDirection","alignItems","backgroundColor","padding","header","body","justifyContent","title","fontSize","fontWeight","marginBottom","qrCode","height","width","alignSelf","notice","marginTop","Document","Page","size","style","View","Text","event","name","ticket_category","displayFullDate","date","Image","src","encodeURIComponent","code","console","log","async","getUserTickets","getUserTicketsFunc","error","fetchTickets","length","Spring","_Fragment","LinearProgress","color","undefined","SelectionListTickets","options","active","setActive","id","messagesByDateHour","margin","QRCode","PDFDownloadLink","document","fileName","blob","url","loading","widgets","settings","AccountSettings","password","ChangePassword","MyProfile","setStatusToIdle","PageHeader","AppGrid","fadeIn","keyframes","NormalizedSelect","styled","Select","withConfig","componentId","light","dark","CustomSelect","onChange","variant","uniqueId","Math","random","toFixed","slice","selectProps","classNamePrefix","isSearchable","openMenuOnFocus","blurInputOnSelect","defaultValue","onMenuClose","menuEl","querySelector","containerEl","parentElement","clonedMenuEl","cloneNode","classList","add","addEventListener","removeChild","appendChild","components","Control","_ref2","BasicSelect","memo","StyledButton","button","text","_templateObject2","prevButton","css","nextButton","StyledSelectionList","div","swiper","setSwiper","direction","changeLanguageDirection","update","handlePrev","slidePrev","realIndex","handleNext","slideNext","Swiper","onSwiper","slidesPerView","spaceBetween","loop","centeredSlides","map","option","index","SwiperSlide","SelectionButton","toString","StyledTabButton","includes","activeTab","setActiveTab","useWindowSize","setOpen","watch","control","defaultValues","passwordOld","passwordNew","passwordConfirm"],"sourceRoot":""}